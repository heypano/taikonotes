{"version":3,"sources":["Components/Cell.js","Data/settings.js","Components/TaikoGridSettings.js","Components/TaikoGrid.js","Components/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["Cell","index","divideEvery","cellsPerLine","useState","clicked","setClicked","unclickedClass","className","onClick","console","log","numerators","Array","keys","map","key","TaikoGridSettings","settings","setSettings","onFormChange","e","target","name","value","onSubmit","onChange","type","TaikoGrid","props","cells","totalLines","numCells","i","push","src","process","PageContainer","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+LAuBeA,EArBF,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,YAAgC,KAAnBC,aACJC,oBAAS,IADc,mBAC9CC,EAD8C,KACrCC,EADqC,KAEjDC,EAAiB,oBAMrB,OAJIN,EAAQC,IAAgB,IAC1BK,EAAiB,iCAIjB,yBACEC,UAAS,qDACPH,EARa,yCAQYE,GAE3BE,QAAS,WACPC,QAAQC,IAAIN,GACZC,GAAYD,O,cCjBPO,EAAa,YAAIC,MAAM,IAAIC,QAAQC,KAAI,SAAAC,GAAG,OAAIA,EAAM,KC6DlDC,EA1DW,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAE/BC,EAAe,SAAAC,GACnBF,EAAY,eACPD,EADM,eAERG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAI9B,OACE,0BACEhB,UAAU,qFACViB,SAXa,SAAAJ,MAab,yBAAKb,UAAU,iCACb,6BACE,kDAEF,6BACE,4BACEe,KAAK,eACLf,UAAU,WACVkB,SAAUN,EACVI,MAAON,EAASf,cAEfS,EAAWG,KAAI,SAAAC,GAAG,OACjB,4BAAQA,IAAG,uBAAkBA,GAAOQ,MAAOR,GACxCA,SAMX,yBAAKR,UAAU,iCACb,6BACE,gDAEF,6BACE,4BACEe,KAAK,cACLf,UAAU,WACVkB,SAAUN,EACVI,MAAON,EAAShB,aAEfU,EAAWG,KAAI,SAAAC,GAAG,OACjB,4BAAQA,IAAG,6BAAwBA,GAAOQ,MAAOR,GAC9CA,SAMX,6BACE,2BAAOW,KAAK,cCSLC,EA1DG,SAAAC,GAqBhB,IApBA,IAAMC,EAAQ,GADW,EAOO1B,mBALR,CACtBD,aAAc,KACdD,YAAa,IACb6B,WAAY,MALW,mBAOlBb,EAPkB,KAORC,EAPQ,KAQnBa,EAAWd,EAASf,aAAee,EAASa,WAazCE,EAAI,EAAGA,EAAID,EAAUC,IAC5BH,EAAMI,KACJ,kBAAC,EAAD,CACElB,IAAKiB,EACLhC,MAAOgC,EACP/B,YAAagB,EAAShB,YACtBC,aAAce,EAASf,gBAK7B,OACE,6BACE,yBAAKK,UAAU,kDACb,yBACE2B,IAAG,UAAKC,GAAL,6BACH5B,UAAU,WAEZ,kBAAC,EAAD,CAAmBU,SAAUA,EAAUC,YAAaA,KAEtD,yBACEX,UAAS,yBAAoBU,EAASf,aAA7B,4BAER2B,GAEH,yBAAKtB,UAAU,iCACb,uBAAGA,UAAU,0BAA0BC,QAhC1B,WACjBU,EAAY,eACPD,EADM,CAETa,YAAab,EAASa,WAAa,EAAI,QA6BrC,UAGA,uBAAGvB,UAAU,0BAA0BC,QAzC7B,WACdU,EAAY,eACPD,EADM,CAETa,YAAab,EAASa,WAAa,EAAI,QAsCrC,aC5COM,EARO,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACpB,OACI,yBAAK9B,UAAU,aACV8B,ICMEC,MAVf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCIYgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c4227247.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Cell = ({ index, divideEvery, cellsPerLine }) => {\n  const [clicked, setClicked] = useState(false);\n  let unclickedClass = \"hover:bg-gray-300\";\n  let clickedClass = \"bg-gray-900 hover:bg-gray-600 selected\";\n  if (index % divideEvery === 0) {\n    unclickedClass = \"bg-gray-300 hover:bg-gray-600\";\n  }\n\n  return (\n    <div\n      className={`border border-blue-800 h-10 cursor-pointer ${\n        clicked ? clickedClass : unclickedClass\n      }`}\n      onClick={() => {\n        console.log(clicked);\n        setClicked(!clicked);\n      }}\n    ></div>\n  );\n};\n\nexport default Cell;\n","export const numerators = [...Array(20).keys()].map(key => key + 1);\nexport const denominators = [4, 8, 16];\n","import React, { useState } from \"react\";\nimport { numerators } from \"../Data/settings\";\n\nconst TaikoGridSettings = ({ settings, setSettings }) => {\n  const onSubmit = e => {};\n  const onFormChange = e => {\n    setSettings({\n      ...settings,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <form\n      className=\"w-full md:w-6/12 lg:w-4/12 border border-blue-300 p-2 flex flex-col justify-center\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"flex flex-row justify-between\">\n        <div>\n          <label>Cells Per Line</label>\n        </div>\n        <div>\n          <select\n            name=\"cellsPerLine\"\n            className=\"p-8 w-12\"\n            onChange={onFormChange}\n            value={settings.cellsPerLine}\n          >\n            {numerators.map(key => (\n              <option key={`cellsPerLine_${key}`} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      <div className=\"flex flex-row justify-between\">\n        <div>\n          <label>Divide every</label>\n        </div>\n        <div>\n          <select\n            name=\"divideEvery\"\n            className=\"p-8 w-12\"\n            onChange={onFormChange}\n            value={settings.divideEvery}\n          >\n            {numerators.map(key => (\n              <option key={`defaultDivideEvery_${key}`} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      <div>\n        <input type=\"submit\" />\n      </div>\n    </form>\n  );\n};\nexport default TaikoGridSettings;\n","import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport TaikoGridSettings from \"./TaikoGridSettings\";\n\n/**\n * React class to Show a Taiko Grid\n */\nconst TaikoGrid = props => {\n  const cells = [];\n  const initialSettings = {\n    cellsPerLine: \"16\",\n    divideEvery: \"4\",\n    totalLines: \"4\"\n  };\n  const [settings, setSettings] = useState(initialSettings);\n  const numCells = settings.cellsPerLine * settings.totalLines;\n  const addLine = () => {\n    setSettings({\n      ...settings,\n      totalLines: +settings.totalLines + 1 + \"\"\n    });\n  };\n  const removeLine = () => {\n    setSettings({\n      ...settings,\n      totalLines: +settings.totalLines - 1 + \"\"\n    });\n  };\n  for (let i = 0; i < numCells; i++) {\n    cells.push(\n      <Cell\n        key={i}\n        index={i}\n        divideEvery={settings.divideEvery}\n        cellsPerLine={settings.cellsPerLine}\n      ></Cell>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"container settings mt-3 mb-3 p-3 flex flex-row\">\n        <img\n          src={`${process.env.PUBLIC_URL}/favicon/taiko_sakura.svg`}\n          className=\"w-1/12\"\n        />\n        <TaikoGridSettings settings={settings} setSettings={setSettings} />\n      </div>\n      <div\n        className={`grid grid-cols-${settings.cellsPerLine} border border-blue-800`}\n      >\n        {cells}\n      </div>\n      <div className=\"flex flex-row justify-between\">\n        <a className=\"text-5xl cursor-pointer\" onClick={removeLine}>\n          ➖\n        </a>\n        <a className=\"text-5xl cursor-pointer\" onClick={addLine}>\n          ➕\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default TaikoGrid;\n","import React from 'react';\n\n/**\n * React class to contain a page\n */\nconst PageContainer = ({children}) => {\n    return (\n        <div className=\"container\">\n            {children}\n        </div>\n    )\n};\n\nexport default PageContainer;","import React from \"react\";\nimport TaikoGrid from \"./Components/TaikoGrid\";\nimport PageContainer from \"./Components/PageContainer\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <PageContainer>\n        <TaikoGrid />\n      </PageContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}