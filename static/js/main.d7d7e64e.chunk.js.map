{"version":3,"sources":["Components/Cell.js","Data/settings.js","Components/TaikoGridSettings.js","Components/TaikoGrid.js","Components/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["Cell","index","divideEvery","sounds","cellsPerLine","useState","selectedSoundIndex","setSelectedSoundIndex","bg","backgroundClass","styleObject","backgroundColor","className","style","onClick","nextSound","lastSelected","length","getNextSound","onContextMenu","e","preventDefault","numerators","Array","keys","map","key","TaikoGridSettings","settings","setSettings","onFormChange","target","name","value","onSubmit","onChange","type","TaikoGrid","props","state","totalLines","addLine","bind","removeLine","this","setState","cells","numCells","soundArray","split","s","trim","i","push","src","process","React","Component","PageContainer","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7d7e64e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n/**\n * Return the next sound\n * @param {[]} sounds\n * @param {number} lastSelected\n * @returns {number}\n */\nconst getNextSound = (sounds, lastSelected) => {\n  if (lastSelected == null) {\n    return 0;\n  } else if (lastSelected + 1 < sounds.length) {\n    return lastSelected + 1;\n  } else {\n    return null;\n  }\n};\n\nconst Cell = ({ index, divideEvery, cellsPerLine, sounds }) => {\n  const [selectedSoundIndex, setSelectedSoundIndex] = useState(null);\n  const [bg, setBg] = useState(null);\n  let backgroundClass = \"hover:bg-gray-300\";\n  if (index % divideEvery === 0) {\n    backgroundClass = \"bg-gray-300 hover:bg-gray-600\";\n  }\n  const styleObject = bg\n    ? {\n        backgroundColor: bg\n      }\n    : {};\n\n  return (\n    <div\n      className={`flex flex-row justify-center items-center select-none border border-blue-800 h-10 cursor-pointer ${backgroundClass}`}\n      style={styleObject}\n      onClick={() => {\n        const nextSound = getNextSound(sounds, selectedSoundIndex);\n        setSelectedSoundIndex(nextSound);\n      }}\n      onContextMenu={e => {\n        e.preventDefault();\n        setSelectedSoundIndex(null);\n      }}\n    >\n      {sounds[selectedSoundIndex]}\n    </div>\n  );\n};\n\nexport default Cell;\n","export const numerators = [...Array(20).keys()].map(key => key + 1);\nexport const denominators = [4, 8, 16];\n","import React, { useState } from \"react\";\nimport { numerators } from \"../Data/settings\";\n\nconst TaikoGridSettings = ({ settings, setSettings }) => {\n  const onSubmit = e => {};\n  const onFormChange = e => {\n    setSettings({\n      ...settings,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <form\n      className=\"w-full md:w-6/12 lg:w-4/12 border border-blue-300 p-2 flex flex-col justify-center\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"flex flex-row justify-between\">\n        <label>Cells Per Line</label>\n        <select\n          name=\"cellsPerLine\"\n          className=\"p-8 w-12\"\n          onChange={onFormChange}\n          value={settings.cellsPerLine}\n        >\n          {numerators.map(key => (\n            <option key={`cellsPerLine_${key}`} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex flex-row justify-between\">\n        <label>Divide every</label>\n        <select\n          name=\"divideEvery\"\n          className=\"p-8 w-12\"\n          onChange={onFormChange}\n          value={settings.divideEvery}\n        >\n          {numerators.map(key => (\n            <option key={`defaultDivideEvery_${key}`} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex flex-row justify-between items-end mt-3\">\n        <label>Available Sounds</label>\n        <input\n          name=\"sounds\"\n          className=\"border-black border p-1\"\n          onChange={onFormChange}\n          value={settings.sounds}\n        />\n      </div>\n      <div>\n        <input type=\"submit\" />\n      </div>\n    </form>\n  );\n};\nexport default TaikoGridSettings;\n","import React from \"react\";\nimport Cell from \"./Cell\";\nimport TaikoGridSettings from \"./TaikoGridSettings\";\n\n/**\n * React class to Show a Taiko Grid\n */\nclass TaikoGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    const initialSettings = {\n      cellsPerLine: \"16\",\n      divideEvery: \"4\",\n      totalLines: \"4\",\n      sounds: \"don, kon, ka\"\n    };\n    this.state = {\n      settings: initialSettings\n    };\n    this.addLine = this.addLine.bind(this);\n    this.removeLine = this.removeLine.bind(this);\n    this.setSettings = this.setSettings.bind(this);\n  }\n\n  /**\n   * Set the settings (passed as prop to children)\n   * @param settings\n   */\n  setSettings(settings) {\n    this.setState({\n      ...this.state,\n      settings: settings\n    });\n  }\n\n  /**\n   * Add a line to the grid\n   */\n  addLine() {\n    this.setSettings({\n      ...this.state.settings,\n      totalLines: +this.state.settings.totalLines + 1 + \"\"\n    });\n  }\n\n  /**\n   * Remove a line from the grid\n   */\n  removeLine() {\n    this.setSettings({\n      ...this.state.settings,\n      totalLines: +this.state.settings.totalLines - 1 + \"\"\n    });\n  }\n\n  render() {\n    const cells = [];\n    const {\n      cellsPerLine,\n      totalLines,\n      divideEvery,\n      sounds\n    } = this.state.settings;\n    const numCells = cellsPerLine * totalLines;\n    const soundArray = sounds.split(\",\").map(s => s.trim());\n    for (let i = 0; i < numCells; i++) {\n      cells.push(\n        <Cell\n          key={i}\n          index={i}\n          divideEvery={divideEvery}\n          cellsPerLine={cellsPerLine}\n          sounds={soundArray}\n        ></Cell>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"container settings mt-3 mb-3 p-3 flex flex-row\">\n          <img\n            src={`${process.env.PUBLIC_URL}/favicon/Taiko.svg`}\n            className=\"w-1/12 pr-2\"\n          />\n          <TaikoGridSettings\n            settings={this.state.settings}\n            setSettings={this.setSettings}\n          />\n        </div>\n        <div\n          className={`grid grid-cols-${cellsPerLine} border border-blue-800`}\n        >\n          {cells}\n        </div>\n        <div className=\"flex flex-row justify-between\">\n          <a className=\"text-5xl cursor-pointer\" onClick={this.removeLine}>\n            ➖\n          </a>\n          <a className=\"text-5xl cursor-pointer\" onClick={this.addLine}>\n            ➕\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TaikoGrid;\n","import React from 'react';\n\n/**\n * React class to contain a page\n */\nconst PageContainer = ({children}) => {\n    return (\n        <div className=\"container\">\n            {children}\n        </div>\n    )\n};\n\nexport default PageContainer;","import React from \"react\";\nimport TaikoGrid from \"./Components/TaikoGrid\";\nimport PageContainer from \"./Components/PageContainer\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <PageContainer>\n        <TaikoGrid />\n      </PageContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}