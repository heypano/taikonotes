{"version":3,"sources":["redux/mainSlice.js","Components/TaikoGridSettings.js","Components/Button.js","redux/store.js","hooks/useOnClickOutside.js","Components/PopupMenu.js","Components/Cell.js","Components/Section.js","Components/TaikoGrid.js","Components/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["name","useSettings","useSelector","state","settings","shallowEqual","useSoundObj","soundObj","getNewSection","index","cells","id","sectionName","totalLines","mainSlice","createSlice","initialState","sections","sound","intensity","cellsPerLine","divideEvery","sounds","don","kon","ka","do","ko","ro","su","tsu","ku","kara","ra","doko","reducers","clearState","action","setSettings","Object","keys","payload","forEach","key","fromEntries","split","map","s","trim","section","cell","setTotalLines","sectionIndex","final","Math","max","slice","setSectionName","setSound","cellIndex","setIntensity","setMainState","addSection","push","length","removeLastSection","pop","actions","setCellsPerLine","setDivideEvery","setSounds","numerators","Array","TaikoGridSettings","dispatch","useDispatch","onFormChange","e","target","value","usedValue","dataType","Number","onSubmit","className","onChange","defaultProps","memo","Button","children","rest","type","undefined","configureStoreOptions","reducer","mainName","mainReducer","store","configureStore","localStorageKey","saveMainToLocal","getState","localStorage","setItem","JSON","stringify","useEffect","require","PopupMenu","open","onOpenChange","menuCoordinates","tooltipColumns","ceil","ref","useRef","onClickOutside","useCallback","stopPropagation","useState","actualPosition","setActualPosition","handler","listener","event","current","contains","document","addEventListener","removeEventListener","useOnClickOutside","console","debug","maxLeft","window","innerWidth","clientWidth","maxTop","innerHeight","clientHeight","left","min","top","log","style","values","onClick","Cell","props","backgroundClass","isPlaying","isStartingCell","showMenu","setShowMenu","setMenuCoordinates","v","useCell","currentSound","onContextMenu","preventDefault","clientX","clientY","toLocaleUpperCase","Section","sectionId","sectionCells","numCells","mobileDisplayedCells","floor","TaikoGrid","sectionsIds","src","process","alt","getItem","parse","getMainFromLocal","PageContainer","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6MAIaA,EAAO,OAmNPC,EAAc,kBACzBC,aAAY,SAACC,GAAD,OAAWA,EAAK,KAAOC,WAAUC,MAElCC,EAAc,kBACzBJ,aAAY,SAACC,GAAD,OAAWA,EAAK,KAAOC,SAASG,WAAUF,MA8BlDG,EAAgB,eAACC,EAAD,uDAAS,EAAT,MAAgB,CACpCC,MAAO,GACPC,GAAIF,EACJG,YAAY,QAAD,OAAUH,GACrBI,WAAY,IAGDC,EAAYC,YAAY,CACnCf,OACAgB,aA5P0B,CAC1BC,SAAU,CACR,CACEP,MAAO,CACL,CACEQ,MAAO,OAET,KACA,CACEA,MAAO,KACPC,UAAW,GAEb,CACED,MAAO,OAET,CACEA,MAAO,IAET,CACEA,MAAO,KACPC,UAAW,GAEb,CACED,MAAO,OAET,CACEA,MAAO,IAET,CACEA,MAAO,MACPC,UAAW,GAEb,KACA,CACED,MAAO,MACPC,UAAW,GAEb,KACA,CACED,MAAO,MAET,CACEA,MAAO,MAET,CACEA,MAAO,MACPC,UAAW,GAEb,KACA,CACED,MAAO,MAET,CACEA,MAAO,MAET,CACEA,MAAO,OAET,CACEA,MAAO,MAET,CACEA,MAAO,MAET,CACEA,MAAO,KACPC,UAAW,GAEb,CACED,MAAO,KACPC,UAAW,GAEb,KACA,CACED,MAAO,MAET,CACEA,MAAO,MACPC,UAAW,GAEb,CACED,MAAO,IAET,CACEA,MAAO,KACPC,UAAW,GAEb,CACED,MAAO,MAET,CACEA,MAAO,MAET,CACEA,MAAO,MAET,CACEA,MAAO,MAET,CACEA,MAAO,MACPC,UAAW,GAEb,KACA,KACA,CACED,MAAO,MAET,CACEA,MAAO,MACPC,UAAW,GAEb,CACED,MAAO,QAET,CACEA,MAAO,OACPC,UAAW,GAEb,CACED,MAAO,MACPC,UAAW,GAEb,CACED,MAAO,MAET,CACEA,MAAO,MACPC,UAAW,GAEb,KACA,CACED,MAAO,MACPC,UAAW,GAEb,KACA,CACED,MAAO,MAET,CACEA,MAAO,KACPC,UAAW,GAEb,CACED,MAAO,KACPC,UAAW,GAEb,CACED,MAAO,MAET,CACEA,MAAO,KACPC,UAAW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","file":"static/js/main.8740fc60.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { shallowEqual, useSelector } from \"react-redux\";\n\nexport const name = \"main\";\n\nexport const initialState = {\n  sections: [\n    {\n      cells: [\n        {\n          sound: \"don\",\n        },\n        null,\n        {\n          sound: \"ka\",\n          intensity: 1,\n        },\n        {\n          sound: \"don\",\n        },\n        {\n          sound: \"\",\n        },\n        {\n          sound: \"ka\",\n          intensity: 1,\n        },\n        {\n          sound: \"don\",\n        },\n        {\n          sound: \"\",\n        },\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n        null,\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n        null,\n        {\n          sound: \"do\",\n        },\n        {\n          sound: \"ko\",\n        },\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n        null,\n        {\n          sound: \"do\",\n        },\n        {\n          sound: \"ro\",\n        },\n        {\n          sound: \"tsu\",\n        },\n        {\n          sound: \"ku\",\n        },\n        {\n          sound: \"su\",\n        },\n        {\n          sound: \"ka\",\n          intensity: 1,\n        },\n        {\n          sound: \"ra\",\n          intensity: 1,\n        },\n        null,\n        {\n          sound: \"do\",\n        },\n        {\n          sound: \"kon\",\n          intensity: 1,\n        },\n        {\n          sound: \"\",\n        },\n        {\n          sound: \"ka\",\n          intensity: 1,\n        },\n        {\n          sound: \"su\",\n        },\n        {\n          sound: \"ko\",\n        },\n        {\n          sound: \"do\",\n        },\n        {\n          sound: \"ko\",\n        },\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n        null,\n        null,\n        {\n          sound: \"ko\",\n        },\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n        {\n          sound: \"doko\",\n        },\n        {\n          sound: \"kara\",\n          intensity: 1,\n        },\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n        {\n          sound: \"su\",\n        },\n        {\n          sound: \"kon\",\n          intensity: 1,\n        },\n        null,\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n        null,\n        {\n          sound: \"ko\",\n        },\n        {\n          sound: \"do\",\n          intensity: 1,\n        },\n        {\n          sound: \"do\",\n          intensity: 1,\n        },\n        {\n          sound: \"su\",\n        },\n        {\n          sound: \"ka\",\n          intensity: 1,\n        },\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n        null,\n        {\n          sound: \"su\",\n        },\n        {\n          sound: \"do\",\n        },\n        {\n          sound: \"ka\",\n          intensity: 1,\n        },\n        null,\n        {\n          sound: \"su\",\n        },\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n        null,\n        null,\n        {\n          sound: \"don\",\n          intensity: 1,\n        },\n      ],\n      id: 1,\n      sectionName: \"Line 1\",\n      totalLines: 4,\n    },\n  ],\n  settings: {\n    cellsPerLine: 16,\n    divideEvery: 2,\n    sounds: \"don, kon, ka, do, ko, ro, su, tsu,ku, kara, ra, doko\",\n    soundObj: {\n      don: \"don\",\n      kon: \"kon\",\n      ka: \"ka\",\n      do: \"do\",\n      ko: \"ko\",\n      ro: \"ro\",\n      su: \"su\",\n      tsu: \"tsu\",\n      ku: \"ku\",\n      kara: \"kara\",\n      ra: \"ra\",\n      doko: \"doko\",\n    },\n  },\n};\nexport const useSettings = () =>\n  useSelector((state) => state[name].settings, shallowEqual);\n\nexport const useSoundObj = () =>\n  useSelector((state) => state[name].settings.soundObj, shallowEqual);\n\nexport const useSections = () =>\n  useSelector((state) => {\n    const { sections } = state[name];\n    return sections;\n  }, shallowEqual);\n\nexport const useSectionIds = () =>\n  useSelector((state) => {\n    const { sections } = state[name];\n    return sections.map((s) => s.id);\n  }, shallowEqual);\n\nexport const useSectionNoCells = (index) =>\n  useSelector((state) => {\n    const { sections } = state[name];\n    const section = {\n      ...sections[index],\n    };\n    delete section.cells;\n    return section;\n  }, shallowEqual);\n\nexport const useCell = (sectionIndex, cellIndex) =>\n  useSelector((state) => {\n    const { sections } = state[name];\n    return sections[sectionIndex].cells[cellIndex] || {};\n  }, shallowEqual);\n\nconst getNewSection = (index = 0) => ({\n  cells: [],\n  id: index,\n  sectionName: `Line ${index}`,\n  totalLines: 1,\n});\n\nexport const mainSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    clearState: (state, action) => {\n      state.sections = [getNewSection()];\n    },\n    setSettings: (state, action) => {\n      Object.keys(action.payload).forEach((key) => {\n        state.settings[key] = action.payload[key];\n      });\n      state.settings.soundObj = Object.fromEntries(\n        state.settings.sounds.split(\",\").map((s) => [s.trim(), s.trim()])\n      );\n      // Erase sounds that don't match\n      state.sections.forEach((section) => {\n        section.cells.forEach((cell) => {\n          if (cell) {\n            cell.sound = state.settings.soundObj[cell.sound] ? cell.sound : \"\";\n          }\n        });\n      });\n    },\n    setTotalLines: (state, action) => {\n      const { sectionIndex, totalLines } = action.payload;\n      const final = Math.max(totalLines, 1);\n      const { cellsPerLine } = state.settings;\n      state.sections[sectionIndex].totalLines = final;\n      state.sections[sectionIndex].cells = state.sections[\n        sectionIndex\n      ].cells.slice(0, final * cellsPerLine);\n    },\n    setSectionName: (state, action) => {\n      const { sectionIndex, sectionName } = action.payload;\n      state.sections[sectionIndex].sectionName = sectionName;\n    },\n    setSound: (state, action) => {\n      const { sectionIndex, cellIndex, sound } = action.payload;\n      const section = state.sections[sectionIndex];\n      const cell = section.cells[cellIndex] || {};\n      cell.sound = sound;\n      state.sections[sectionIndex].cells[cellIndex] = cell;\n    },\n    setIntensity: (state, action) => {\n      const { sectionIndex, cellIndex, intensity } = action.payload;\n      const section = state.sections[sectionIndex];\n      const cell = section.cells[cellIndex] || {};\n      cell.intensity = intensity;\n      state.sections[sectionIndex].cells[cellIndex] = cell;\n    },\n    setMainState: (state, action) => action.payload,\n    addSection: (state, action) => {\n      state.sections.push(getNewSection(state.sections.length + 1));\n    },\n    removeLastSection: (state, action) => {\n      state.sections.pop();\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  setCellsPerLine,\n  setDivideEvery,\n  setTotalLines,\n  setSectionName,\n  setSounds,\n  setSettings,\n  setSound,\n  setIntensity,\n  setMainState,\n  addSection,\n  removeLastSection,\n  clearState,\n} = mainSlice.actions;\n\nexport default mainSlice.reducer;\n","import React, { memo } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setSettings, useSettings } from \"../redux/mainSlice\";\n\nconst numerators = [...Array(20).keys()].map((key) => key + 1);\n// export const denominators = [4, 8, 16];\n\nconst TaikoGridSettings = () => {\n  const settings = useSettings();\n  const dispatch = useDispatch();\n  const { cellsPerLine, divideEvery, sounds } = settings;\n  const onSubmit = () => {};\n  const onFormChange = (e) => {\n    const { name, value, dataType } = e.target;\n    const usedValue = dataType === \"number\" ? Number(value) : value;\n    dispatch(\n      setSettings({\n        [name]: usedValue,\n      })\n    );\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"flex flex-col \">\n      <div className=\"flex flex-row justify-between\">\n        <label>Cells Per Line</label>\n        <select\n          name=\"cellsPerLine\"\n          className=\"p-2 \"\n          onChange={onFormChange}\n          value={cellsPerLine}\n          data-data-type=\"number\"\n        >\n          {numerators.map((key) => (\n            <option key={`cellsPerLine_${key}`} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex flex-row justify-between\">\n        <label>Divide every</label>\n        <select\n          name=\"divideEvery\"\n          className=\"p-2 \"\n          onChange={onFormChange}\n          value={divideEvery}\n          data-data-type=\"number\"\n        >\n          {numerators.map((key) => (\n            <option key={`defaultDivideEvery_${key}`} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex flex-row justify-between items-end mt-3\">\n        <label>Available Sounds</label>\n        <input\n          name=\"sounds\"\n          className=\"border-black border p-1\"\n          onChange={onFormChange}\n          value={sounds}\n        />\n      </div>\n    </form>\n  );\n};\n\nTaikoGridSettings.propTypes = {};\n\nTaikoGridSettings.defaultProps = {};\n\nexport default memo(TaikoGridSettings);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A component which will show a styled button\n */\nconst Button = ({ children, className, ...rest }) => (\n  <button\n    type=\"button\"\n    className={`p-3 bg-blue-100 text-gray-800 cursor-pointer hover:opacity-75 ${className}`}\n    {...rest}\n  >\n    {children}\n  </button>\n);\n\nButton.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nButton.defaultProps = {\n  className: undefined,\n  children: undefined,\n};\n\nexport default memo(Button);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport mainReducer, { name as mainName } from \"./mainSlice\";\n\nconst configureStoreOptions = {\n  reducer: {\n    [mainName]: mainReducer,\n  },\n};\n\nexport const store = configureStore(configureStoreOptions);\n\nexport const getMainState = () => store.getState()[mainName];\n\nconst localStorageKey = \"taikoNotesState\";\n\nexport const saveMainToLocal = () => {\n  const state = getMainState();\n  localStorage.setItem(localStorageKey, JSON.stringify(state));\n};\n\nexport const getMainFromLocal = () => {\n  const state = localStorage.getItem(localStorageKey);\n  if (state) {\n    return JSON.parse(state);\n  }\n  return null;\n};\n","const { useEffect } = require(\"react\");\n\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n","import React, { memo, useCallback, useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { setSound, useSoundObj } from \"../redux/mainSlice\";\nimport useOnClickOutside from \"../hooks/useOnClickOutside\";\n\nconst PopupMenu = ({\n  cellIndex,\n  open,\n  onOpenChange,\n  sectionIndex,\n  menuCoordinates,\n}) => {\n  const soundObj = useSoundObj();\n  const tooltipColumns = Math.ceil(Object.keys(soundObj).length / 4);\n  const dispatch = useDispatch();\n  const ref = useRef();\n  const onClickOutside = useCallback(\n    (e) => {\n      onOpenChange(false);\n      e.stopPropagation();\n    },\n    [onOpenChange]\n  );\n  const [actualPosition, setActualPosition] = useState();\n  useOnClickOutside(ref, onClickOutside);\n  console.debug(\"PopupMenu rerender\");\n\n  useEffect(() => {\n    if (ref.current && menuCoordinates) {\n      const minLeft = 10;\n      const minTop = 10;\n      const maxLeft = window.innerWidth - ref.current.clientWidth;\n      const maxTop = window.innerHeight - ref.current.clientHeight;\n      const left = Math.max(\n        Math.min(menuCoordinates[0] - minLeft, maxLeft),\n        minLeft\n      );\n      const top = Math.max(\n        Math.min(menuCoordinates[1] - minTop, maxTop),\n        minTop\n      );\n      setActualPosition({ left, top });\n    } else {\n      setActualPosition(null);\n    }\n  }, [open, menuCoordinates]);\n  console.log(soundObj);\n  return (\n    open && (\n      <div\n        ref={ref}\n        className={`popupmenu grid grid-rows-4 grid-cols-${tooltipColumns} w-max grid-flow-col max-h-48 ${\n          actualPosition ? \"\" : \"invisible\"\n        } `}\n        style={actualPosition}\n      >\n        {Object.values(soundObj).map((sound) => (\n          <div\n            key={sound}\n            className=\"p-3 hover:bg-blue-200 \"\n            onClick={(e) => {\n              dispatch(\n                setSound({\n                  cellIndex,\n                  sectionIndex,\n                  sound,\n                })\n              );\n              onClickOutside(e);\n            }}\n          >\n            {sound}\n          </div>\n        ))}\n      </div>\n    )\n  );\n};\n\nPopupMenu.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onOpenChange: PropTypes.func.isRequired,\n  cellIndex: PropTypes.number.isRequired,\n  soundObj: PropTypes.shape({}).isRequired,\n  menuCoordinates: PropTypes.arrayOf(PropTypes.number),\n  sectionIndex: PropTypes.number.isRequired,\n};\n\nPopupMenu.defaultProps = { menuCoordinates: undefined };\n\nexport default memo(PopupMenu);\n","import React, { memo, useCallback, useState } from \"react\";\nimport * as PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport { setIntensity, useCell, useSoundObj } from \"../redux/mainSlice\";\nimport PopupMenu from \"./PopupMenu\";\n\nconst Cell = (props) => {\n  const { cellIndex, sectionIndex, isPlaying, isStartingCell } = props;\n  const dispatch = useDispatch();\n  const soundObj = useSoundObj();\n  const [showMenu, setShowMenu] = useState(false);\n  const [menuCoordinates, setMenuCoordinates] = useState();\n  const onOpenChange = useCallback((v) => {\n    setShowMenu(v);\n  }, []);\n\n  let backgroundClass;\n  const { sound: currentSound = 0, intensity } = useCell(\n    sectionIndex,\n    cellIndex\n  );\n  const sound = (currentSound && soundObj[currentSound]) || \"\";\n  if (isPlaying) {\n    backgroundClass = \"bg-red-300 hover:bg-red-600\";\n  } else if (isStartingCell) {\n    backgroundClass = \"bg-gray-300 hover:bg-blue-400\";\n  } else {\n    backgroundClass = \"hover:bg-blue-400\";\n  }\n\n  console.debug(`Cell rerender ${cellIndex}`);\n  return (\n    <div\n      className={`fadeBg flex flex-row justify-center items-center select-none border border-blue-800 h-10 cursor-pointer ${backgroundClass}`}\n      onContextMenu={(e) => {\n        dispatch(\n          setIntensity({\n            cellIndex,\n            sectionIndex,\n            intensity: intensity ? 0 : 1,\n          })\n        );\n        e.preventDefault();\n      }}\n      onClick={(e) => {\n        setShowMenu(true);\n        setMenuCoordinates([e.clientX, e.clientY]);\n        e.preventDefault();\n      }}\n    >\n      {intensity ? sound.toLocaleUpperCase() : sound}\n      <PopupMenu\n        open={showMenu}\n        menuCoordinates={menuCoordinates}\n        onOpenChange={onOpenChange}\n        cellIndex={cellIndex}\n        sectionIndex={sectionIndex}\n      />\n    </div>\n  );\n};\n\nCell.propTypes = {\n  isStartingCell: PropTypes.bool.isRequired,\n  cellIndex: PropTypes.number.isRequired,\n  sectionIndex: PropTypes.number.isRequired,\n  isPlaying: PropTypes.bool,\n};\n\nCell.defaultProps = {\n  isPlaying: undefined,\n};\n\nexport default memo(Cell);\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport Cell from \"./Cell\";\nimport {\n  setSectionName,\n  setTotalLines,\n  useSectionNoCells,\n  useSettings,\n} from \"../redux/mainSlice\";\nimport Button from \"./Button\";\n\nconst Section = (props) => {\n  const { sectionId } = props;\n  const { cellsPerLine, divideEvery, sounds } = useSettings();\n  const dispatch = useDispatch();\n  const section = useSectionNoCells(sectionId);\n  const { sectionName, totalLines, id } = section;\n  const sectionCells = [];\n  const numCells = cellsPerLine * totalLines;\n  const mobileDisplayedCells =\n    cellsPerLine > 7 ? Math.floor(cellsPerLine / 2) : cellsPerLine;\n  console.debug(`Section rerender ${sectionName} - ${id}`);\n  for (let cellIndex = 0; cellIndex < numCells; cellIndex++) {\n    sectionCells.push(\n      <Cell\n        key={`cell_${sectionId}_${cellIndex}`}\n        isStartingCell={cellIndex % divideEvery === 0}\n        cellsPerLine={cellsPerLine}\n        cellIndex={cellIndex}\n        sectionIndex={sectionId}\n      />\n    );\n  }\n  return (\n    <div key={`section_${sectionId}`} className=\"mb-8 p-1\">\n      <div>\n        <Button\n          className=\"mr-2\"\n          onClick={() => {\n            dispatch(\n              setTotalLines({\n                sectionIndex: sectionId,\n                totalLines: totalLines + 1,\n              })\n            );\n          }}\n        >\n          +\n        </Button>\n        <Button\n          className=\"mr-2\"\n          onClick={() => {\n            dispatch(\n              setTotalLines({\n                sectionIndex: sectionId,\n                totalLines: totalLines - 1,\n              })\n            );\n          }}\n        >\n          -\n        </Button>\n\n        <input\n          type=\"text\"\n          value={sectionName}\n          className=\"text-2xl  outline-none\"\n          onChange={(e) => {\n            dispatch(\n              setSectionName({\n                sectionIndex: sectionId,\n                sectionName: e.target.value,\n              })\n            );\n          }}\n        />\n      </div>\n      <div\n        className={`grid grid-cols-${mobileDisplayedCells} md:grid-cols-${cellsPerLine} border border-blue-800`}\n      >\n        {sectionCells}\n      </div>\n    </div>\n  );\n};\n\nSection.propTypes = {\n  sectionId: PropTypes.number,\n};\n\nSection.defaultProps = {\n  sectionId: undefined,\n};\nexport default memo(Section);\n","import React, { memo } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport TaikoGridSettings from \"./TaikoGridSettings\";\nimport {\n  addSection,\n  clearState,\n  removeLastSection,\n  setMainState,\n  useSectionIds,\n} from \"../redux/mainSlice\";\nimport Button from \"./Button\";\nimport { getMainFromLocal, saveMainToLocal } from \"../redux/store\";\nimport Section from \"./Section\";\n\n// const chihat = new Audio(\"/drum-sounds-master/closed-hihat.mp3\");\n// const snare = new Audio(\"/drum-sounds-master/acoustic-snare.mp3\");\n// const bass = new Audio(\"/drum-sounds-master/bass-drum-1.mp3\");\n//\n// const notes = [chihat, snare, bass];\n\nconst TaikoGrid = () => {\n  const dispatch = useDispatch();\n  const sectionsIds = useSectionIds();\n  console.debug(\"TaikoGrid rerender\");\n  return (\n    <div>\n      <div className=\"settings p-1 mt-3 mb-3 flex flex-col md:flex-row\">\n        <img\n          src={`${process.env.PUBLIC_URL}/favicon/Taiko.svg`}\n          className=\"w-20 pr-2\"\n          alt=\"taiko logo\"\n        />\n        <div className=\"w-full md:w-6/12 lg:w-4/12 border border-blue-300 p-2 flex justify-between mr-3\">\n          <TaikoGridSettings />\n        </div>\n        <div className=\"w-full md:w-6/12 lg:w-4/12 flex flex-col justify-between\">\n          <div className=\"mt-2 md:mt-0 grid grid-rows-2 grid-flow-col gap-1\">\n            <Button\n              onClick={() => {\n                dispatch(addSection());\n              }}\n            >\n              Add Section\n            </Button>\n            <Button\n              onClick={() => {\n                dispatch(removeLastSection());\n              }}\n            >\n              Remove Last Section\n            </Button>\n            <Button\n              onClick={() => {\n                saveMainToLocal();\n              }}\n            >\n              Save\n            </Button>\n            <Button\n              onClick={() => {\n                const state = getMainFromLocal();\n                console.debug(\"entire state\", state);\n                dispatch(setMainState(state));\n              }}\n            >\n              Load\n            </Button>\n            <Button\n              onClick={() => {\n                dispatch(clearState());\n              }}\n            >\n              Clear\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {sectionsIds.map((sectionId, sectionIndex) => (\n          <Section key={sectionId} sectionId={sectionIndex} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TaikoGrid);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * React class to contain a page\n */\nconst PageContainer = ({ children }) => (\n  <div className=\"container mx-auto\">{children}</div>\n);\n\nPageContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nPageContainer.defaultProps = {\n  children: \"asd\",\n};\n\nexport default PageContainer;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport TaikoGrid from \"./Components/TaikoGrid\";\nimport PageContainer from \"./Components/PageContainer\";\nimport { store } from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <PageContainer>\n          <TaikoGrid />\n        </PageContainer>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}