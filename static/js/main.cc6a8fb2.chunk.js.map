{"version":3,"sources":["Components/Cell.js","Data/settings.js","Components/TaikoGridSettings.js","Components/Button.js","Components/TaikoGrid.js","Components/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","state","selectedSoundIndex","sounds","lastSelected","length","this","index","divideEvery","backgroundClass","isPlaying","className","onClick","nextSound","getNextSound","setState","onContextMenu","e","preventDefault","React","Component","numerators","Array","keys","map","key","TaikoGridSettings","settings","setSettings","onFormChange","target","name","value","onSubmit","onChange","cellsPerLine","Button","children","rest","notes","Audio","TaikoGrid","totalLines","noteIndex","cells","addLine","bind","removeLine","submitTest","playSound","playSong","stopSong","data","song","main","getCellIndices","console","log","playTimer","setInterval","Number","isInteger","currentTime","play","clearInterval","current","getCurrentSoundIndex","numCells","soundArray","split","s","trim","i","cellRef","createRef","push","ref","src","process","PageContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc6a8fb2.chunk.js","sourcesContent":["import React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSoundIndex: null\n    };\n  }\n  /**\n   * Return the next sound\n   * @param {[]} sounds\n   * @param {number} lastSelected\n   * @returns {number}\n   */\n  getNextSound(sounds, lastSelected) {\n    if (lastSelected == null) {\n      return 0;\n    } else if (lastSelected + 1 < sounds.length) {\n      return lastSelected + 1;\n    } else {\n      return null;\n    }\n  }\n\n  getCurrentSoundIndex() {\n    return this.state.selectedSoundIndex;\n  }\n\n  render() {\n    let { index, divideEvery, sounds, isPlaying } = this.props;\n    let backgroundClass = \"hover:bg-gray-300\";\n    if (index % divideEvery === 0) {\n      backgroundClass = \"bg-gray-300 hover:bg-gray-600\";\n    }\n    if (isPlaying) {\n      backgroundClass = \"bg-red-300 hover:bg-red-600\";\n    }\n\n    return (\n      <div\n        className={`flex flex-row justify-center items-center select-none border border-blue-800 h-10 cursor-pointer ${backgroundClass}`}\n        onClick={() => {\n          const nextSound = this.getNextSound(\n            sounds,\n            this.state.selectedSoundIndex\n          );\n          this.setState({ ...this.state, selectedSoundIndex: nextSound });\n        }}\n        onContextMenu={e => {\n          e.preventDefault();\n          this.setState({ ...this.state, selectedSoundIndex: null });\n        }}\n      >\n        {sounds[this.state.selectedSoundIndex]}\n      </div>\n    );\n  }\n}\n\nCell.propTypes = {\n  index: PropTypes.any,\n  divideEvery: PropTypes.any,\n  cellsPerLine: PropTypes.any,\n  sounds: PropTypes.any\n};\n\nexport default Cell;\n","export const numerators = [...Array(20).keys()].map(key => key + 1);\nexport const denominators = [4, 8, 16];\n","import React, { useState } from \"react\";\nimport { numerators } from \"../Data/settings\";\n\nconst TaikoGridSettings = ({ settings, setSettings }) => {\n  const onSubmit = e => {};\n  const onFormChange = e => {\n    setSettings({\n      ...settings,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"flex flex-col \">\n      <div className=\"flex flex-row justify-between\">\n        <label>Cells Per Line</label>\n        <select\n          name=\"cellsPerLine\"\n          className=\"p-2 \"\n          onChange={onFormChange}\n          value={settings.cellsPerLine}\n        >\n          {numerators.map(key => (\n            <option key={`cellsPerLine_${key}`} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex flex-row justify-between\">\n        <label>Divide every</label>\n        <select\n          name=\"divideEvery\"\n          className=\"p-2 \"\n          onChange={onFormChange}\n          value={settings.divideEvery}\n        >\n          {numerators.map(key => (\n            <option key={`defaultDivideEvery_${key}`} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex flex-row justify-between items-end mt-3\">\n        <label>Available Sounds</label>\n        <input\n          name=\"sounds\"\n          className=\"border-black border p-1\"\n          onChange={onFormChange}\n          value={settings.sounds}\n        />\n      </div>\n    </form>\n  );\n};\nexport default TaikoGridSettings;\n","import React from \"react\";\n\n/**\n * A component which will show a styled button\n */\nconst Button = ({ children, className, ...rest }) => {\n  return (\n    <button\n      className={`p-3 bg-blue-100 text-gray-800 cursor-pointer hover:opacity-75 ${className}`}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport Cell from \"./Cell\";\nimport TaikoGridSettings from \"./TaikoGridSettings\";\nimport Button from \"./Button\";\n\nconst chihat = new Audio(\"/drum-sounds-master/closed-hihat.mp3\");\nconst snare = new Audio(\"/drum-sounds-master/acoustic-snare.mp3\");\nconst bass = new Audio(\"/drum-sounds-master/bass-drum-1.mp3\");\n\nconst notes = [chihat, snare, bass];\n/**\n * React class to Show a Taiko Grid\n */\nclass TaikoGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    const initialSettings = {\n      cellsPerLine: \"16\",\n      divideEvery: \"4\",\n      totalLines: \"4\",\n      sounds: \"hihat, snare, bass\"\n    };\n    this.state = {\n      settings: initialSettings,\n      noteIndex: null,\n      isPlaying: false\n    };\n    this.cells = [];\n    this.addLine = this.addLine.bind(this);\n    this.removeLine = this.removeLine.bind(this);\n    this.setSettings = this.setSettings.bind(this);\n    this.submitTest = this.submitTest.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.playSong = this.playSong.bind(this);\n    this.stopSong = this.stopSong.bind(this);\n  }\n\n  /**\n   * Set the settings (passed as prop to children)\n   * @param settings\n   */\n  setSettings(settings) {\n    this.setState({\n      ...this.state,\n      settings: settings\n    });\n  }\n\n  /**\n   * Add a line to the grid\n   */\n  addLine() {\n    this.setSettings({\n      ...this.state.settings,\n      totalLines: +this.state.settings.totalLines + 1 + \"\"\n    });\n  }\n\n  /**\n   * Remove a line from the grid\n   */\n  removeLine() {\n    this.setSettings({\n      ...this.state.settings,\n      totalLines: +this.state.settings.totalLines - 1 + \"\"\n    });\n  }\n\n  submitTest(e) {\n    e.preventDefault();\n    const data = {\n      ...this.state.settings,\n      song: {\n        main: this.getCellIndices()\n      }\n    };\n    console.log(data);\n  }\n\n  playSong() {\n    if (this.playTimer) {\n      this.setState({\n        isPlaying: true,\n        noteIndex: null\n      });\n    } else {\n      this.playTimer = setInterval(() => {\n        const song = this.getCellIndices();\n        const noteIndex = Number.isInteger(this.state.noteIndex)\n          ? this.state.noteIndex + 1\n          : 0;\n        this.setState({\n          isPlaying: true,\n          noteIndex: noteIndex\n        });\n        if (Number.isInteger(song[noteIndex]) && notes[song[noteIndex]]) {\n          notes[song[noteIndex]].currentTime = 0;\n          notes[song[noteIndex]].play();\n        }\n      }, 200);\n    }\n  }\n  stopSong() {\n    if (this.playTimer) {\n      clearInterval(this.playTimer);\n      this.playTimer = null;\n    }\n    this.setState({\n      isPlaying: false,\n      noteIndex: null\n    });\n  }\n\n  playSound(index) {\n    this.getCellIndices();\n  }\n\n  getCellIndices() {\n    return this.cells.map(({ current }) => current.getCurrentSoundIndex());\n  }\n\n  render() {\n    const cells = [];\n    const { noteIndex, isPlaying, settings } = this.state;\n    const { cellsPerLine, totalLines, divideEvery, sounds } = settings;\n    const numCells = cellsPerLine * totalLines;\n    const soundArray = sounds.split(\",\").map(s => s.trim());\n\n    this.cells = [];\n    for (let i = 0; i < numCells; i++) {\n      const cellRef = React.createRef();\n      this.cells.push(cellRef);\n      cells.push(\n        <Cell\n          ref={cellRef}\n          key={i}\n          index={i}\n          divideEvery={divideEvery}\n          cellsPerLine={cellsPerLine}\n          sounds={soundArray}\n          isPlaying={isPlaying && i === noteIndex}\n        ></Cell>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"container settings mt-3 mb-3 p-3 flex flex-row\">\n          <img\n            src={`${process.env.PUBLIC_URL}/favicon/Taiko.svg`}\n            className=\"w-1/12 pr-2\"\n          />\n          <div className=\"w-full md:w-6/12 lg:w-4/12 border border-blue-300 p-2 mr-auto w-full\">\n            <TaikoGridSettings\n              settings={this.state.settings}\n              setSettings={this.setSettings}\n            />\n          </div>\n          <div className=\"w-full md:w-6/12 lg:w-4/12 flex flex-col justify-between\">\n            {/*<Button onClick={this.submitTest}>Submit</Button>*/}\n            <Button onClick={this.playSong} className=\"m-4\">\n              Play\n            </Button>\n            <Button onClick={this.stopSong} className=\"m-4\">\n              Stop\n            </Button>\n            <Button onClick={this.addLine} className=\"m-4\">\n              Add Line\n            </Button>\n            <Button onClick={this.removeLine} className=\"m-4\">\n              Remove Line\n            </Button>\n          </div>\n        </div>\n        <div\n          className={`grid grid-cols-${cellsPerLine} border border-blue-800`}\n        >\n          {cells}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TaikoGrid;\n","import React from 'react';\n\n/**\n * React class to contain a page\n */\nconst PageContainer = ({children}) => {\n    return (\n        <div className=\"container\">\n            {children}\n        </div>\n    )\n};\n\nexport default PageContainer;","import React from \"react\";\nimport TaikoGrid from \"./Components/TaikoGrid\";\nimport PageContainer from \"./Components/PageContainer\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <PageContainer>\n        <TaikoGrid />\n      </PageContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}