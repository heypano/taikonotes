{"version":3,"sources":["Components/TaikoGrid.js","Components/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["Cell","index","numCells","useState","clicked","setClicked","unclickedClass","className","onClick","console","log","onFormChange","target","name","value","onSubmit","e","preventDefault","elements","TaikoGrid","props","cells","i","push","key","numerators","Array","keys","map","src","process","onChange","defaultValue","type","PageContainer","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+LA2EMA,EAAO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAsB,KAAfC,SACSC,oBAAS,IADH,mBAC7BC,EAD6B,KACpBC,EADoB,KAGhCC,EAAiB,oBAMrB,OAJIL,EAHsB,IAGQ,IAChCK,EAAiB,iCAIjB,yBACEC,UAAS,qDACPH,EARa,yCAQYE,GAE3BE,QAAS,WACPC,QAAQC,IAAIN,GACZC,GAAYD,OAMdO,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtCL,QAAQC,IAAR,UAAeG,EAAf,YAAuBC,KAMnBC,EAAW,SAAAC,GACfA,EAAEC,iBACFR,QAAQC,IAAIM,EAAEJ,OAAOM,WAGRC,EAzGG,SAAAC,GAGhB,IAFA,IACMC,EAAQ,GACLC,EAAI,EAAGA,EAFC,IAEaA,IAC5BD,EAAME,KAAK,kBAAC,EAAD,CAAMC,IAAKF,EAAGrB,MAAOqB,EAAGpB,SAHpB,OAKjB,IAAMuB,EAAa,YAAIC,MAAM,IAAIC,QAAQC,KAAI,SAAAJ,GAAG,OAAIA,EAAM,KAK1D,OACE,6BACE,yBAAKjB,UAAU,8CACb,yBACEsB,IAAG,UAAKC,GAAL,6BACHvB,UAAU,WAEZ,0BACEA,UAAU,iEACVwB,SAAUpB,EACVI,SAAUA,GAEV,yBAAKR,UAAU,iCACb,6BACE,6CAEF,6BACE,4BACEM,KAAK,YACLN,UAAU,WACVyB,aAvBY,IAyBXP,EAAWG,KAAI,SAAAJ,GAAG,OACjB,4BAAQA,IAAG,oBAAeA,GAAOV,MAAOU,GACrCA,SAMX,yBAAKjB,UAAU,iCACb,6BACE,+CAEF,6BACE,4BACEM,KAAK,cACLN,UAAU,WACVyB,aAxCc,IAFP,CAAC,EAAG,EAAG,IA4CAJ,KAAI,SAAAJ,GAAG,OACnB,4BAAQA,IAAG,sBAAiBA,GAAOV,MAAOU,GACvCA,SAMX,6BACE,2BAAOS,KAAK,cAIlB,yBAAK1B,UAAU,2DACZc,KCxDMa,EARO,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACpB,OACI,yBAAK5B,UAAU,aACV4B,ICMEC,MAVf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCIY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.20366d50.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n/**\n * React class to Show a Taiko Grid\n */\nconst TaikoGrid = props => {\n  const numCells = 224;\n  const cells = [];\n  for (let i = 0; i < numCells; i++) {\n    cells.push(<Cell key={i} index={i} numCells={numCells}></Cell>);\n  }\n  const numerators = [...Array(20).keys()].map(key => key + 1);\n  const denominators = [4, 8, 16];\n  const selectedNumerator = 16;\n  const selectedDenominator = 16;\n\n  return (\n    <div>\n      <div className=\"container settings mt-3 mb-3 flex flex-row\">\n        <img\n          src={`${process.env.PUBLIC_URL}/favicon/taiko_sakura.svg`}\n          className=\"w-1/12\"\n        />\n        <form\n          className=\"w-2/12 border border-blue-300 p-2 flex flex-col justify-center\"\n          onChange={onFormChange}\n          onSubmit={onSubmit}\n        >\n          <div className=\"flex flex-row justify-between\">\n            <div>\n              <label>Numerator</label>\n            </div>\n            <div>\n              <select\n                name=\"numerator\"\n                className=\"p-8 w-12\"\n                defaultValue={selectedNumerator}\n              >\n                {numerators.map(key => (\n                  <option key={`numerator_${key}`} value={key}>\n                    {key}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div className=\"flex flex-row justify-between\">\n            <div>\n              <label>Denominator</label>\n            </div>\n            <div>\n              <select\n                name=\"denominator\"\n                className=\"p-8 w-12\"\n                defaultValue={selectedDenominator}\n              >\n                {denominators.map(key => (\n                  <option key={`denominator_${key}`} value={key}>\n                    {key}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div>\n            <input type=\"submit\" />\n          </div>\n        </form>\n      </div>\n      <div className=\"grid grid-cols-8 md:grid-cols-16 border border-blue-800\">\n        {cells}\n      </div>\n    </div>\n  );\n};\n\nconst Cell = ({ index, numCells }) => {\n  const [clicked, setClicked] = useState(false);\n  const signatureDivision = 4;\n  let unclickedClass = \"hover:bg-gray-300\";\n  let clickedClass = \"bg-gray-900 hover:bg-gray-600 selected\";\n  if (index % signatureDivision === 0) {\n    unclickedClass = \"bg-gray-300 hover:bg-gray-600\";\n  }\n\n  return (\n    <div\n      className={`border border-blue-800 h-10 cursor-pointer ${\n        clicked ? clickedClass : unclickedClass\n      }`}\n      onClick={() => {\n        console.log(clicked);\n        setClicked(!clicked);\n      }}\n    ></div>\n  );\n};\n\nconst onFormChange = ({ target: { name, value } }) => {\n  console.log(`${name} ${value}`);\n  switch (name) {\n    case \"numerator\":\n  }\n};\n\nconst onSubmit = e => {\n  e.preventDefault();\n  console.log(e.target.elements);\n};\n\nexport default TaikoGrid;\n","import React from 'react';\n\n/**\n * React class to contain a page\n */\nconst PageContainer = ({children}) => {\n    return (\n        <div className=\"container\">\n            {children}\n        </div>\n    )\n};\n\nexport default PageContainer;","import React from \"react\";\nimport TaikoGrid from \"./Components/TaikoGrid\";\nimport PageContainer from \"./Components/PageContainer\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <PageContainer>\n        <TaikoGrid />\n      </PageContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}