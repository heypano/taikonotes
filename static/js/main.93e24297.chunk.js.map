{"version":3,"sources":["Components/Cell.js","Data/settings.js","Components/TaikoGridSettings.js","Components/TaikoGrid.js","Components/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["lastC1","getRandomColorNumber","lastC2","lastC3","Math","floor","random","getNext","num","Cell","index","divideEvery","cellsPerLine","useState","clicked","setClicked","bg","setBg","unclickedClass","className","style","backgroundColor","onClick","c1","c2","c3","getRandomColor","which","getProgressiveColor","numerators","Array","keys","map","key","TaikoGridSettings","settings","setSettings","onFormChange","e","target","name","value","onSubmit","onChange","type","TaikoGrid","props","state","totalLines","addLine","bind","removeLine","this","setState","cells","numCells","i","push","src","process","React","Component","PageContainer","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93e24297.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst randomColors = true;\nconst proggressiveColor = true;\nlet lastC1 = getRandomColorNumber();\nlet lastC2 = getRandomColorNumber();\nlet lastC3 = getRandomColorNumber();\n\nconst Cell = ({ index, divideEvery, cellsPerLine }) => {\n  const [clicked, setClicked] = useState(false);\n  const [bg, setBg] = useState(\"transparent\");\n  let unclickedClass = \"hover:bg-gray-300\";\n  let clickedClass = \"bg-gray-900 hover:bg-gray-600 selected\";\n  if (index % divideEvery === 0) {\n    unclickedClass = \"bg-gray-300 hover:bg-gray-600\";\n  }\n\n  return (\n    <div\n      className={`border border-blue-800 h-10 cursor-pointer ${\n        clicked ? clickedClass : unclickedClass\n      }`}\n      style={{\n        backgroundColor: bg\n      }}\n      onClick={() => {\n        if (randomColors) {\n          setBg(getRandomColor());\n        }\n        if (proggressiveColor) {\n          setBg(getProgressiveColor());\n        }\n        setClicked(!clicked);\n      }}\n    ></div>\n  );\n};\n\nfunction getProgressiveColor() {\n  const which = Math.floor(Math.random() * Math.floor(3));\n  const c1 = which === 0 ? getNext(lastC1) : lastC1;\n  const c2 = which === 1 ? getNext(lastC2) : lastC2;\n  const c3 = which === 2 ? getNext(lastC3) : lastC3;\n  return `rgb(${c1},${c2},${c3})`;\n}\n\nfunction getRandomColor() {\n  const c1 = getRandomColorNumber();\n  const c2 = getRandomColorNumber();\n  const c3 = getRandomColorNumber();\n  return `rgb(${c1},${c2},${c3})`;\n}\n\nfunction getRandomColorNumber() {\n  return Math.floor(Math.random() * Math.floor(256));\n}\n\nfunction getNext(num) {\n  const result = num + Math.floor(getRandomColorNumber());\n  return result % 256;\n}\n\nexport default Cell;\n","export const numerators = [...Array(20).keys()].map(key => key + 1);\nexport const denominators = [4, 8, 16];\n","import React, { useState } from \"react\";\nimport { numerators } from \"../Data/settings\";\n\nconst TaikoGridSettings = ({ settings, setSettings }) => {\n  const onSubmit = e => {};\n  const onFormChange = e => {\n    setSettings({\n      ...settings,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <form\n      className=\"w-full md:w-6/12 lg:w-4/12 border border-blue-300 p-2 flex flex-col justify-center\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"flex flex-row justify-between\">\n        <div>\n          <label>Cells Per Line</label>\n        </div>\n        <div>\n          <select\n            name=\"cellsPerLine\"\n            className=\"p-8 w-12\"\n            onChange={onFormChange}\n            value={settings.cellsPerLine}\n          >\n            {numerators.map(key => (\n              <option key={`cellsPerLine_${key}`} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      <div className=\"flex flex-row justify-between\">\n        <div>\n          <label>Divide every</label>\n        </div>\n        <div>\n          <select\n            name=\"divideEvery\"\n            className=\"p-8 w-12\"\n            onChange={onFormChange}\n            value={settings.divideEvery}\n          >\n            {numerators.map(key => (\n              <option key={`defaultDivideEvery_${key}`} value={key}>\n                {key}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      <div>\n        <input type=\"submit\" />\n      </div>\n    </form>\n  );\n};\nexport default TaikoGridSettings;\n","import React from \"react\";\nimport Cell from \"./Cell\";\nimport TaikoGridSettings from \"./TaikoGridSettings\";\n\n/**\n * React class to Show a Taiko Grid\n */\nclass TaikoGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    const initialSettings = {\n      cellsPerLine: \"16\",\n      divideEvery: \"4\",\n      totalLines: \"4\"\n    };\n    this.state = {\n      settings: initialSettings\n    };\n    this.addLine = this.addLine.bind(this);\n    this.removeLine = this.removeLine.bind(this);\n    this.setSettings = this.setSettings.bind(this);\n  }\n\n  /**\n   * Set the settings (passed as prop to children)\n   * @param settings\n   */\n  setSettings(settings) {\n    this.setState({\n      ...this.state,\n      settings: settings\n    });\n  }\n\n  /**\n   * Add a line to the grid\n   */\n  addLine() {\n    this.setSettings({\n      ...this.state.settings,\n      totalLines: +this.state.settings.totalLines + 1 + \"\"\n    });\n  }\n\n  /**\n   * Remove a line from the grid\n   */\n  removeLine() {\n    this.setSettings({\n      ...this.state.settings,\n      totalLines: +this.state.settings.totalLines - 1 + \"\"\n    });\n  }\n\n  render() {\n    const cells = [];\n    const { cellsPerLine, totalLines, divideEvery } = this.state.settings;\n    const numCells = cellsPerLine * totalLines;\n    for (let i = 0; i < numCells; i++) {\n      cells.push(\n        <Cell\n          key={i}\n          index={i}\n          divideEvery={divideEvery}\n          cellsPerLine={cellsPerLine}\n        ></Cell>\n      );\n    }\n\n    return (\n      <div>\n        <div className=\"container settings mt-3 mb-3 p-3 flex flex-row\">\n          <img\n            src={`${process.env.PUBLIC_URL}/favicon/taiko.svg`}\n            className=\"w-1/12 pr-2\"\n          />\n          <TaikoGridSettings\n            settings={this.state.settings}\n            setSettings={this.setSettings}\n          />\n        </div>\n        <div\n          className={`grid grid-cols-${cellsPerLine} border border-blue-800`}\n        >\n          {cells}\n        </div>\n        <div className=\"flex flex-row justify-between\">\n          <a className=\"text-5xl cursor-pointer\" onClick={this.removeLine}>\n            ➖\n          </a>\n          <a className=\"text-5xl cursor-pointer\" onClick={this.addLine}>\n            ➕\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TaikoGrid;\n","import React from 'react';\n\n/**\n * React class to contain a page\n */\nconst PageContainer = ({children}) => {\n    return (\n        <div className=\"container\">\n            {children}\n        </div>\n    )\n};\n\nexport default PageContainer;","import React from \"react\";\nimport TaikoGrid from \"./Components/TaikoGrid\";\nimport PageContainer from \"./Components/PageContainer\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <PageContainer>\n        <TaikoGrid />\n      </PageContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}