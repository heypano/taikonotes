{"version":3,"sources":["Components/TaikoGridSettings.js","redux/mainSlice.js","Components/Button.js","redux/store.js","Components/Cell.js","Components/Section.js","Components/TaikoGrid.js","Components/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["numerators","Array","keys","map","key","TaikoGridSettings","settings","setSettings","onFormChange","e","target","name","value","usedValue","dataType","Number","onSubmit","className","onChange","cellsPerLine","divideEvery","sounds","getNewSection","index","cells","totalLines","mainSlice","createSlice","initialState","sections","soundIndex","reducers","state","action","Object","payload","forEach","setTotalLines","sectionIndex","Math","max","setSoundIndex","cellIndex","cell","setMainState","addSection","push","length","removeLastSection","pop","actions","setCellsPerLine","setDivideEvery","setSounds","Button","children","rest","configureStoreOptions","reducer","mainName","mainReducer","store","configureStore","localStorageKey","saveMainToLocal","getState","localStorage","setItem","JSON","stringify","Cell","props","backgroundClass","sound","onClick","onContextMenu","isPlaying","isStartingCell","Section","section","soundArray","sectionName","sectionCells","numCells","dispatch","useDispatch","console","log","nextSoundsIndex","notes","Audio","TaikoGrid","useSelector","useMemo","split","s","trim","src","process","alt","getItem","parse","getMainFromLocal","PageContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc377784.chunk.js","sourcesContent":["import React from \"react\";\nconst numerators = [...Array(20).keys()].map((key) => key + 1);\n// export const denominators = [4, 8, 16];\n\nconst TaikoGridSettings = ({ settings, setSettings }) => {\n  const onSubmit = (e) => {};\n  const onFormChange = (e) => {\n    const { name, value, dataType } = e.target;\n    const usedValue = dataType === \"number\" ? Number(value) : value;\n    setSettings({\n      [name]: usedValue,\n    });\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"flex flex-col \">\n      <div className=\"flex flex-row justify-between\">\n        <label>Cells Per Line</label>\n        <select\n          name=\"cellsPerLine\"\n          className=\"p-2 \"\n          onChange={onFormChange}\n          value={settings.cellsPerLine}\n          data-data-type=\"number\"\n        >\n          {numerators.map((key) => (\n            <option key={`cellsPerLine_${key}`} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex flex-row justify-between\">\n        <label>Divide every</label>\n        <select\n          name=\"divideEvery\"\n          className=\"p-2 \"\n          onChange={onFormChange}\n          value={settings.divideEvery}\n          data-data-type=\"number\"\n        >\n          {numerators.map((key) => (\n            <option key={`defaultDivideEvery_${key}`} value={key}>\n              {key}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex flex-row justify-between items-end mt-3\">\n        <label>Available Sounds</label>\n        <input\n          name=\"sounds\"\n          className=\"border-black border p-1\"\n          onChange={onFormChange}\n          value={settings.sounds}\n        />\n      </div>\n    </form>\n  );\n};\nexport default TaikoGridSettings;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { useSelector } from \"react-redux\";\n\nexport const name = \"main\";\n\nconst initialState = {\n  sections: [\n    {\n      name: \"Line 1\",\n      totalLines: 4,\n      cells: [\n        {\n          soundIndex: 1,\n        },\n        null,\n        {\n          soundIndex: 3,\n        },\n        {\n          soundIndex: 1,\n        },\n        {\n          soundIndex: 0,\n        },\n        {\n          soundIndex: 3,\n        },\n        {\n          soundIndex: 1,\n        },\n        {\n          soundIndex: 0,\n        },\n        {\n          soundIndex: 1,\n        },\n        null,\n        {\n          soundIndex: 1,\n        },\n        null,\n        {\n          soundIndex: 4,\n        },\n        {\n          soundIndex: 5,\n        },\n        {\n          soundIndex: 1,\n        },\n        null,\n        {\n          soundIndex: 4,\n        },\n        {\n          soundIndex: 6,\n        },\n        {\n          soundIndex: 8,\n        },\n        {\n          soundIndex: 9,\n        },\n        {\n          soundIndex: 7,\n        },\n        {\n          soundIndex: 3,\n        },\n        {\n          soundIndex: 11,\n        },\n        null,\n        {\n          soundIndex: 4,\n        },\n        {\n          soundIndex: 2,\n        },\n        {\n          soundIndex: 0,\n        },\n        {\n          soundIndex: 3,\n        },\n        {\n          soundIndex: 7,\n        },\n        {\n          soundIndex: 5,\n        },\n        {\n          soundIndex: 4,\n        },\n        {\n          soundIndex: 5,\n        },\n        {\n          soundIndex: 1,\n        },\n        null,\n        null,\n        {\n          soundIndex: 5,\n        },\n        {\n          soundIndex: 1,\n        },\n        {\n          soundIndex: 12,\n        },\n        {\n          soundIndex: 10,\n        },\n        {\n          soundIndex: 1,\n        },\n        {\n          soundIndex: 7,\n        },\n        {\n          soundIndex: 2,\n        },\n        null,\n        {\n          soundIndex: 1,\n        },\n        null,\n        {\n          soundIndex: 5,\n        },\n        {\n          soundIndex: 4,\n        },\n        {\n          soundIndex: 4,\n        },\n        {\n          soundIndex: 7,\n        },\n        {\n          soundIndex: 3,\n        },\n        {\n          soundIndex: 1,\n        },\n        null,\n        {\n          soundIndex: 7,\n        },\n        {\n          soundIndex: 4,\n        },\n        {\n          soundIndex: 3,\n        },\n        null,\n        {\n          soundIndex: 7,\n        },\n        {\n          soundIndex: 1,\n        },\n        null,\n        null,\n        {\n          soundIndex: 1,\n        },\n      ],\n    },\n    {\n      name: \"Line 2\",\n      totalLines: 0,\n      cells: [\n        {\n          soundIndex: 1,\n        },\n        {\n          soundIndex: 2,\n        },\n        null,\n        null,\n        {\n          soundIndex: 1,\n        },\n        null,\n        {\n          soundIndex: 3,\n        },\n        {\n          soundIndex: 1,\n        },\n        {\n          soundIndex: 2,\n        },\n      ],\n    },\n  ],\n  settings: {\n    cellsPerLine: 16,\n    divideEvery: 2,\n    sounds: \"don, kon, ka, do, ko, ro, su, tsu,ku, kara, ra, doko\",\n  },\n};\nexport const useSettings = () => {\n  return useSelector((state) => {\n    const { cellsPerLine, divideEvery, sounds } = state[name].settings;\n    return {\n      cellsPerLine,\n      divideEvery,\n      sounds,\n    };\n  });\n};\n\nexport const useSections = () => {\n  return useSelector((state) => {\n    const { sections } = state[name];\n    return sections;\n  });\n};\n\nconst getNewSection = (index = 0) => ({\n  cells: [],\n  totalLines: 0,\n  name: `Line ${index}`,\n});\n\nexport const mainSlice = createSlice({\n  name,\n  initialState,\n  reducers: {\n    // Only sets the keys provided\n    setSettings: (state, action) => {\n      Object.keys(action.payload).forEach((key) => {\n        state.settings[key] = action.payload[key];\n      });\n    },\n    setTotalLines: (state, action) => {\n      const { sectionIndex, totalLines } = action.payload;\n      state.sections[sectionIndex].totalLines = Math.max(totalLines, 0);\n    },\n    setSoundIndex: (state, action) => {\n      const { sectionIndex, cellIndex, soundIndex } = action.payload;\n      const section = state.sections[sectionIndex] || getNewSection();\n      const cell = section.cells[cellIndex] || {};\n      cell.soundIndex = soundIndex;\n      state.sections[sectionIndex].cells[cellIndex] = cell;\n    },\n    setMainState: (state, action) => {\n      return action.payload;\n    },\n    addSection: (state, action) => {\n      state.sections.push(getNewSection(state.sections.length + 1));\n    },\n    removeLastSection: (state, action) => {\n      state.sections.pop();\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  setCellsPerLine,\n  setDivideEvery,\n  setTotalLines,\n  setSounds,\n  setSettings,\n  setSoundIndex,\n  setMainState,\n  addSection,\n  removeLastSection,\n} = mainSlice.actions;\n\nexport default mainSlice.reducer;\n","import React from \"react\";\n\n/**\n * A component which will show a styled button\n */\nconst Button = ({ children, className, ...rest }) => {\n  return (\n    <button\n      className={`p-3 bg-blue-100 text-gray-800 cursor-pointer hover:opacity-75 ${className}`}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport mainReducer, { name as mainName } from \"./mainSlice\";\n\nconst configureStoreOptions = {\n  reducer: {\n    [mainName]: mainReducer,\n  },\n};\n\nexport const store = configureStore(configureStoreOptions);\n\nexport const getMainState = () => store.getState()[mainName];\n\nconst localStorageKey = \"taikoNotesState\";\n\nexport const saveMainToLocal = () => {\n  const state = getMainState();\n  localStorage.setItem(localStorageKey, JSON.stringify(state));\n};\n\nexport const getMainFromLocal = () => {\n  const state = localStorage.getItem(localStorageKey);\n  if (state) {\n    return JSON.parse(state);\n  }\n};\n","import React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nconst Cell = (props) => {\n  let { sound, onClick, onContextMenu, isPlaying, isStartingCell } = props;\n  let backgroundClass;\n  if (isPlaying) {\n    backgroundClass = \"bg-red-300 hover:bg-red-600\";\n  } else if (isStartingCell) {\n    backgroundClass = \"bg-gray-300 hover:bg-blue-400\";\n  } else {\n    backgroundClass = \"hover:bg-blue-400\";\n  }\n\n  return (\n    <div\n      className={`flex flex-row justify-center items-center select-none border border-blue-800 h-10 cursor-pointer ${backgroundClass}`}\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n    >\n      {sound}\n    </div>\n  );\n};\n\nCell.propTypes = {\n  isStartingCell: PropTypes.bool,\n  sound: PropTypes.node,\n  onClick: PropTypes.func,\n  onContextMenu: PropTypes.func,\n};\n\nexport default Cell;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Cell from \"./Cell\";\nimport { setSoundIndex, setTotalLines } from \"../redux/mainSlice\";\nimport Button from \"./Button\";\nimport { useDispatch } from \"react-redux\";\n\nconst Section = (props) => {\n  const {\n    section,\n    sectionIndex,\n    cellsPerLine,\n    divideEvery,\n    soundArray,\n  } = props;\n  const { name: sectionName, cells, totalLines } = section;\n  const sectionCells = [];\n  const numCells = cellsPerLine * totalLines;\n  const dispatch = useDispatch();\n  console.log(\"yo\");\n  for (let cellIndex = 0; cellIndex < numCells; cellIndex++) {\n    const cell = cells[cellIndex] || {};\n    const { soundIndex = 0 } = cell;\n    sectionCells.push(\n      <Cell\n        key={`cell_${sectionIndex}_${cellIndex}`}\n        isStartingCell={cellIndex % divideEvery === 0}\n        cellsPerLine={cellsPerLine}\n        sound={soundArray[soundIndex]}\n        onClick={() => {\n          const nextSoundsIndex = (soundIndex + 1) % soundArray.length;\n          dispatch(\n            setSoundIndex({\n              cellIndex,\n              sectionIndex,\n              soundIndex: nextSoundsIndex,\n            })\n          );\n        }}\n        onContextMenu={() =>\n          dispatch(\n            setSoundIndex({\n              cellIndex,\n              sectionIndex,\n              soundIndex: 0,\n            })\n          )\n        }\n      ></Cell>\n    );\n  }\n  return (\n    <div key={`section_${sectionIndex}`} className=\"mb-8\">\n      <h2 className=\"text-2xl mb-2\">{sectionName}</h2>\n      <div className={`grid grid-cols-${cellsPerLine} border border-blue-800`}>\n        {sectionCells}\n      </div>\n      <div>\n        <Button\n          onClick={() => {\n            dispatch(\n              setTotalLines({\n                sectionIndex,\n                totalLines: totalLines - 1,\n              })\n            );\n          }}\n        >\n          -\n        </Button>\n        <Button\n          className=\"mr-2\"\n          onClick={() => {\n            dispatch(\n              setTotalLines({\n                sectionIndex,\n                totalLines: totalLines + 1,\n              })\n            );\n          }}\n        >\n          +\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nSection.propTypes = {\n  section: PropTypes.shape({}),\n  sectionIndex: PropTypes.number,\n  cellsPerLine: PropTypes.number,\n  divideEvery: PropTypes.number,\n  soundArray: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nexport default Section;\n","import React, { useMemo } from \"react\";\nimport TaikoGridSettings from \"./TaikoGridSettings\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  useSettings,\n  setSettings,\n  useSections,\n  setMainState,\n  addSection,\n  removeLastSection,\n} from \"../redux/mainSlice\";\nimport Button from \"./Button\";\nimport { getMainFromLocal, saveMainToLocal } from \"../redux/store\";\nimport Section from \"./Section\";\n\nconst chihat = new Audio(\"/drum-sounds-master/closed-hihat.mp3\");\nconst snare = new Audio(\"/drum-sounds-master/acoustic-snare.mp3\");\nconst bass = new Audio(\"/drum-sounds-master/bass-drum-1.mp3\");\n\nconst notes = [chihat, snare, bass];\nconsole.log(notes);\n\nconst TaikoGrid = (props) => {\n  const dispatch = useDispatch();\n  const settings = useSettings();\n  const sections = useSections();\n  const { cellsPerLine, divideEvery, sounds } = settings;\n\n  const soundArray = useMemo(\n    () => [null, ...sounds.split(\",\").map((s) => s.trim())],\n    [sounds]\n  );\n\n  console.log(\"entire taiko grid rerender\");\n\n  return (\n    <div>\n      <div className=\"settings mt-3 mb-3 p-3 flex flex-row\">\n        <img\n          src={`${process.env.PUBLIC_URL}/favicon/Taiko.svg`}\n          className=\"w-1/12 pr-2\"\n          alt=\"taiko logo\"\n        />\n        <div className=\"w-full md:w-6/12 lg:w-4/12 border border-blue-300 p-2 mr-auto w-full\">\n          <TaikoGridSettings\n            settings={settings}\n            setSettings={(s) => {\n              dispatch(setSettings(s));\n            }}\n          />\n        </div>\n        <div className=\"w-full md:w-6/12 lg:w-4/12 flex flex-col justify-between\">\n          <Button\n            onClick={() => {\n              dispatch(addSection());\n            }}\n            className=\"m-4\"\n          >\n            Add Section\n          </Button>\n          <Button\n            onClick={() => {\n              dispatch(removeLastSection());\n            }}\n            className=\"m-4\"\n          >\n            Remove Last Section\n          </Button>\n          <Button\n            onClick={() => {\n              saveMainToLocal();\n            }}\n            className=\"m-4\"\n          >\n            Save\n          </Button>\n          <Button\n            onClick={() => {\n              const state = getMainFromLocal();\n              console.log(state);\n              dispatch(setMainState(state));\n            }}\n            className=\"m-4\"\n          >\n            Load\n          </Button>\n        </div>\n      </div>\n      <div>\n        {sections.map((section, sectionIndex) => (\n          <Section\n            cellsPerLine={cellsPerLine}\n            divideEvery={divideEvery}\n            section={section}\n            sectionIndex={sectionIndex}\n            soundArray={soundArray}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TaikoGrid;\n","import React from 'react';\n\n/**\n * React class to contain a page\n */\nconst PageContainer = ({children}) => {\n    return (\n        <div className=\"container mx-auto\">\n            {children}\n        </div>\n    )\n};\n\nexport default PageContainer;","import React from \"react\";\nimport TaikoGrid from \"./Components/TaikoGrid\";\nimport PageContainer from \"./Components/PageContainer\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <PageContainer>\n          <TaikoGrid />\n        </PageContainer>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}